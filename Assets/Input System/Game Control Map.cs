//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Packages/com.osgames.boardgame/Assets/Input System/Game Control Map.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControlMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControlMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Game Control Map"",
    ""maps"": [
        {
            ""name"": ""Active Player Controls"",
            ""id"": ""a8adeb1f-dd71-46f8-8891-5bde12de9f82"",
            ""actions"": [
                {
                    ""name"": ""Toggle View"",
                    ""type"": ""Button"",
                    ""id"": ""7edb96fa-923e-4aab-b2bf-4e951294f4a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""059df228-c9ed-4b45-9ebd-33e9fadd128e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Left"",
                    ""type"": ""Button"",
                    ""id"": ""96302c09-7e81-4995-a80c-90e614e356bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Right"",
                    ""type"": ""Button"",
                    ""id"": ""0ae09997-e6bd-4ea7-8033-56a108aae88d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""e4f2b816-fca0-452b-8b2e-e6d88ce38f22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Execute"",
                    ""type"": ""Button"",
                    ""id"": ""dd159309-4088-4792-af85-f24eeaa457ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pass Turn"",
                    ""type"": ""Button"",
                    ""id"": ""270de539-5a07-4d87-8ee2-a95dc1213989"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""416d0a6e-d462-4e12-a462-478be93fc8e6"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42623eea-aed0-4717-94ca-cbcd7c1b7f9b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ca00389-6d99-4c0b-9eed-3259498ca464"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""faa4284c-a0ce-47c7-b871-b3b0477b5404"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd7bb150-acfe-4e24-a4ec-4d1729a19500"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad5106f5-321c-40e6-8366-e7ebcb470cab"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d569abf3-494e-44a1-92fd-a5e4a149cd1b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d6a813f-2940-4a6c-a72f-be80473f2a45"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef4a96e1-5476-4791-8890-86a12bd46071"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b775e119-a798-40fb-b399-50e3bb2d57a0"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40f8c1d6-404d-4e68-9f73-ce4d2ae465c7"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""318d8c33-3b8d-4bd4-b423-a42c4a967635"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Execute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cac62537-2a60-44e6-a2cd-f8a5bfbc3dbb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Execute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f7ad867-c787-4187-8bba-20a9e6aab063"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Hold(duration=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pass Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f824d0f-ab02-4309-8fbb-da96f3f06541"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": ""Hold(duration=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pass Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Game Controls"",
            ""bindingGroup"": ""Game Controls"",
            ""devices"": []
        }
    ]
}");
        // Active Player Controls
        m_ActivePlayerControls = asset.FindActionMap("Active Player Controls", throwIfNotFound: true);
        m_ActivePlayerControls_ToggleView = m_ActivePlayerControls.FindAction("Toggle View", throwIfNotFound: true);
        m_ActivePlayerControls_Confirm = m_ActivePlayerControls.FindAction("Confirm", throwIfNotFound: true);
        m_ActivePlayerControls_CycleLeft = m_ActivePlayerControls.FindAction("Cycle Left", throwIfNotFound: true);
        m_ActivePlayerControls_CycleRight = m_ActivePlayerControls.FindAction("Cycle Right", throwIfNotFound: true);
        m_ActivePlayerControls_Back = m_ActivePlayerControls.FindAction("Back", throwIfNotFound: true);
        m_ActivePlayerControls_Execute = m_ActivePlayerControls.FindAction("Execute", throwIfNotFound: true);
        m_ActivePlayerControls_PassTurn = m_ActivePlayerControls.FindAction("Pass Turn", throwIfNotFound: true);
    }

    ~@GameControlMap()
    {
        UnityEngine.Debug.Assert(!m_ActivePlayerControls.enabled, "This will cause a leak and performance issues, GameControlMap.ActivePlayerControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Active Player Controls
    private readonly InputActionMap m_ActivePlayerControls;
    private List<IActivePlayerControlsActions> m_ActivePlayerControlsActionsCallbackInterfaces = new List<IActivePlayerControlsActions>();
    private readonly InputAction m_ActivePlayerControls_ToggleView;
    private readonly InputAction m_ActivePlayerControls_Confirm;
    private readonly InputAction m_ActivePlayerControls_CycleLeft;
    private readonly InputAction m_ActivePlayerControls_CycleRight;
    private readonly InputAction m_ActivePlayerControls_Back;
    private readonly InputAction m_ActivePlayerControls_Execute;
    private readonly InputAction m_ActivePlayerControls_PassTurn;
    public struct ActivePlayerControlsActions
    {
        private @GameControlMap m_Wrapper;
        public ActivePlayerControlsActions(@GameControlMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleView => m_Wrapper.m_ActivePlayerControls_ToggleView;
        public InputAction @Confirm => m_Wrapper.m_ActivePlayerControls_Confirm;
        public InputAction @CycleLeft => m_Wrapper.m_ActivePlayerControls_CycleLeft;
        public InputAction @CycleRight => m_Wrapper.m_ActivePlayerControls_CycleRight;
        public InputAction @Back => m_Wrapper.m_ActivePlayerControls_Back;
        public InputAction @Execute => m_Wrapper.m_ActivePlayerControls_Execute;
        public InputAction @PassTurn => m_Wrapper.m_ActivePlayerControls_PassTurn;
        public InputActionMap Get() { return m_Wrapper.m_ActivePlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActivePlayerControlsActions set) { return set.Get(); }
        public void AddCallbacks(IActivePlayerControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActivePlayerControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActivePlayerControlsActionsCallbackInterfaces.Add(instance);
            @ToggleView.started += instance.OnToggleView;
            @ToggleView.performed += instance.OnToggleView;
            @ToggleView.canceled += instance.OnToggleView;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @CycleLeft.started += instance.OnCycleLeft;
            @CycleLeft.performed += instance.OnCycleLeft;
            @CycleLeft.canceled += instance.OnCycleLeft;
            @CycleRight.started += instance.OnCycleRight;
            @CycleRight.performed += instance.OnCycleRight;
            @CycleRight.canceled += instance.OnCycleRight;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @Execute.started += instance.OnExecute;
            @Execute.performed += instance.OnExecute;
            @Execute.canceled += instance.OnExecute;
            @PassTurn.started += instance.OnPassTurn;
            @PassTurn.performed += instance.OnPassTurn;
            @PassTurn.canceled += instance.OnPassTurn;
        }

        private void UnregisterCallbacks(IActivePlayerControlsActions instance)
        {
            @ToggleView.started -= instance.OnToggleView;
            @ToggleView.performed -= instance.OnToggleView;
            @ToggleView.canceled -= instance.OnToggleView;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @CycleLeft.started -= instance.OnCycleLeft;
            @CycleLeft.performed -= instance.OnCycleLeft;
            @CycleLeft.canceled -= instance.OnCycleLeft;
            @CycleRight.started -= instance.OnCycleRight;
            @CycleRight.performed -= instance.OnCycleRight;
            @CycleRight.canceled -= instance.OnCycleRight;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @Execute.started -= instance.OnExecute;
            @Execute.performed -= instance.OnExecute;
            @Execute.canceled -= instance.OnExecute;
            @PassTurn.started -= instance.OnPassTurn;
            @PassTurn.performed -= instance.OnPassTurn;
            @PassTurn.canceled -= instance.OnPassTurn;
        }

        public void RemoveCallbacks(IActivePlayerControlsActions instance)
        {
            if (m_Wrapper.m_ActivePlayerControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActivePlayerControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActivePlayerControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActivePlayerControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActivePlayerControlsActions @ActivePlayerControls => new ActivePlayerControlsActions(this);
    private int m_GameControlsSchemeIndex = -1;
    public InputControlScheme GameControlsScheme
    {
        get
        {
            if (m_GameControlsSchemeIndex == -1) m_GameControlsSchemeIndex = asset.FindControlSchemeIndex("Game Controls");
            return asset.controlSchemes[m_GameControlsSchemeIndex];
        }
    }
    public interface IActivePlayerControlsActions
    {
        void OnToggleView(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnCycleLeft(InputAction.CallbackContext context);
        void OnCycleRight(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnExecute(InputAction.CallbackContext context);
        void OnPassTurn(InputAction.CallbackContext context);
    }
}
